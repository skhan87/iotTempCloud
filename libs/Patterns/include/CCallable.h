/**
 * @file CCallable.h
 * @author Joshua Lauterbach (joshua@aconno.de)
 * @brief functions for making C++ member functions callable in C.
 * @version 0.1
 * @date 2019-11-14
 *
 * @copyright aconno GmbH (c) 2019
 *
 */

#ifndef __CCALLABLE_H__
#define __CCALLABLE_H__

//-------------------------------- PROTOTYPES ---------------------------------

//--------------------------------- INCLUDES ----------------------------------

//-------------------------------- CONSTANTS ----------------------------------

//---------------------------- CLASS DEFINITION -------------------------------

namespace Patterns
{
/**
 * @brief wraps a member function to be used in a C callback with env context.
 * The template args are redundant, that shall be fixed as soon as a
 * solution is found.
 *
 * @tparam T class of the member function
 * @tparam FctType type of the fct without class, e.g. "int(int, int)"
 * @tparam fct member function to be wrapped
 * @tparam FirstArgTypes arguments of the member function
 * @tparam SecondArgTypes arguments of the member function
 * @param args1 args generated by the C lib for this callback
 * @param env environment passed by callback (this ptr). Has to be passed when
 * registering to C callback.
 * @param args2 args generated by the C lib for this callback.
 * @return decltype(auto)
 */
template<class T,
         class FctType,
         FctType T::*fct,
         class... FirstArgTypes,
         class... SecondArgTypes>
decltype(auto) wrapCCallable(FirstArgTypes &&... args1,
                             void *env,
                             SecondArgTypes &&... args2);

/**
 * @brief wrap a member function in a static function call.
 * At the moment giving M and ArgTypes is redundant to the type of fct.
 * This shall be fixed as soon as there is a better way to do this.
 *
 * @tparam M type of the function fct, e.g. 'int(int, char*)'
 * @tparam fct pointer to the member function
 * @tparam ArgTypes type of the arguments of fct, e.g. 'int, char*' for the
 * above example
 * @param args
 * @return decltype(auto) return type is the same as fct return type.
 */
template<class ClassToBeSingle,
         class M,
         M ClassToBeSingle::*fct,
         class... ArgTypes>
decltype(auto) wrapSingleton(ArgTypes &&... args);

}  // namespace Patterns

#include "../src/CCallable.cpp"

#endif  //__CCALLABLE_H__