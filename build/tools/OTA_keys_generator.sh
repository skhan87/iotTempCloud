#!/bin/bash
#
# Script for generating public/private key pairs.
#
# Used with aconno firmware to enhance security of OTA updates.
#
# Meant to be invoked from makefile using a dedicated target.
#
# Usage:
#	* if not initially, make this script executable:
#			i.e. run 'chmod +x thisScript.sh' in terminal
#
#
# Hrvoje Brezak
# hrvoje@aconno.de
# aconno d.o.o.
# 21-09-2020

### Helper functions
function yell() { echo "$0: $*" >&2; }
function die() { yell "$*"; exit 111; }
function try() { "$@" || die "cannot $*"; }
function printHelp()
{
	echo
	echo '---------------------------------------'
	echo '| HELP: Private/public keys generator |'
	echo '---------------------------------------'
	echo 'This script is used to generate new private/public key pair used on aconno products for generating OTA update packages.'
	echo 'It is meant to be invoked on the command line.'
	echo ''
	echo 'DETAILS'
	echo '-------'
	echo 'Private/public key pairs are used to enhance security of Over-The-Air updates feature. Private key is generated. It should'
	echo 'NEVER be shared in its raw form. Public key is generated based on private key and can be shared freely. Secure bootloaders are' 
	echo 'generated using public key. Finally, OTA update is signed using the private key during package generation. When user initiates'
	echo 'OTA update, bootloader verifies if the update package has been signed by a private key which matches its public key. If so,' 
	echo 'the update is allowed to proceed, otherwise it fails.'
	echo ''
	echo 'USAGE'
	echo '-----'
	echo 'In a terminal window navigate inside ...build/tools directory and use:'
	echo '	./OTA_keys_generator.sh'
	echo ''
	echo 'All files required for OTA will be generated in user-defined directory (by default in build/generated).'
	echo 'Recommended way to generate OTA updates using new keys is not to replace default keys but to redirect OTA package'
	echo 'generator script to take inputs from build/generated directory.'
	echo ''
	echo 'WARNING: take care of the order of operations if replacing beacons default keys via OTA update!'
	echo 'First, an OTA update has to be created using old keys pair. During package creation, option to do full APP+SOFTDEVICE+BOOTLOADER'
	echo 'must be selected. When prompted for bootloader file, enter path to bootloader newly generated by this script.'
	echo 'After this OTA update is successfully completed, use new public/private keys pair for generating OTA update packages.'
	echo ''
	echo 'WARNING: removing old encrypted private key file will unable user to update other beacons still using older bootloader.'
	echo ''
	echo 'WARNING: losing generated enycrpyted private key file will make it impossible to update any beacons using corresponding'
	echo 'bootloader via OTA. Such devices will have to be flashed by using J-link or similar device and physical wire connection.'
	echo ''
	echo 'PLATFORMS'
	echo '---------'
	echo 'Currently supported platforms: nrf52832, nrf52840'
	echo 'This script generates bootloaders for all supported firmware versions.'
	echo ''
	echo 'MODES'
	echo '-----'
	echo 'Default user choice is <generate keys>. By pressing enter the script shall proceede to create'
	echo 'keys and bootloaders. Alternatively, user can opt for <help> option, which prints this message.'
	echo ''
	echo '----------------------------------'
	echo ''
}

function generateReadme() # mandatory arg $1 : outputPath
{
	if [ $# -lt 1 ]
	then
		die "Used bash function generateReadme() requires input argument!"
	fi

	touch $OUTPATH/README.md
	echo '==========' >> $1/README.md
	echo '| README |' >> $1/README.md
	echo '==========' >> $1/README.md
	echo 'This directory is created by using OTA_keys_generator.sh script located in .../build/tools/' >> $1/README.md
	echo 'This directory and its contents are generated per user request and may contain sensitive information.' >> $1/README.md
	echo 'As such, this directory and its contents are not version controlled.' >> $1/README.md
	echo >> $1/README.md
	echo 'Below is the help command output of OTA_keys_generator script.' >> $1/README.md
	echo >> $1/README.md
	printHelp  >> $1/README.md
}

### Default paths
SCRIPTPATH=$(dirname $(realpath $0))
DEFAULT_OUTPATH=$SCRIPTPATH/../generated
DEFAULT_SDKPATH=$(dirname $(dirname $SCRIPTPATH))/libs/NordicAL/libs/nrf5_sdk_15.2.0

echo '---------------------------------'
echo '| Private/public keys generator |'
echo '---------------------------------'

### User input: operation selection
while :
do
	echo 'This script generates a private/public key pair and complies matching bootloaders.' 
	echo 'WARNING: read help for instructions on how to properly replace old keys pair!'
	echo 'Continue?'
	read -p '(<Enter> to proceed, <h> for help): ' USRCHOICE

	if [ "$USRCHOICE" == "" ]
	then
		USRCHOICE=1
		echo
		break
	elif [ "$USRCHOICE" == "h" ]
	then
		printHelp
	else
		echo
		echo "Invalid entry!"
		echo
	fi
done

### User input : Nordic SDK path
while :
do
	read -p 'Path to Nordic SDK directory (default: ../../libs/NordicAL/libs/nrf5_sdk_15.2.0 ): ' SDKPATH

	if [ "$SDKPATH" == "" ]
	then
		SDKPATH=$DEFAULT_SDKPATH
		break
	elif [ ! -d $SDKPATH ]
	then
		echo "This directory does not exist!"
		continue
	else
		# Valid custom path entered
		break
	fi
done

### Prerequisites check
if ! [ -x "$(command -v nrfutil)" ]; then
  echo 'Error: nrfutil is not installed.' >&2
  echo 'Install it and rerun this script.'
  exit 1
fi

if [ ! -f $SDKPATH/external/micro-ecc/micro-ecc/uECC.c ]
then
	echo 'Error: micro-ecc library not present.' >&2
	echo 'Clone it inside '$SDKPATH'/external/micro-ecc,'
	echo 'build all libs inside it using make and rerun this script.'
	echo ''
	echo 'It can be found here: https://github.com/kmackay/micro-ecc'
	exit 1
fi

### User input: output directory
while :
do
	read -p 'Output directory path (default: ../generated ): ' OUTPATH

	if [ "$OUTPATH" == "" ]
	then
		OUTPATH=$DEFAULT_OUTPATH
	fi

	if [ ! -d $OUTPATH ]
	then
		mkdir $OUTPATH
		generateReadme $OUTPATH
		break
	else
		echo ''
		echo 'Directory '$OUTPATH' already exists.'
		echo 'This will remove any contents inside.'
		echo 'WARNING: THIS CANNOT BE UNDONE!'
		read -p 'Continue? (yes/no): ' ANS
		if [ "$ANS" == "yes" ]
		then
			rm -rf $OUTPATH
			mkdir $OUTPATH
			generateReadme $OUTPATH
			break
		elif [ "$ANS" == "no" ]
		then
			echo 'Aborted.'
			exit 0
		else
			echo 'Invalid entry.'
			continue
		fi
	fi
done

### Generate new private/public key pair
echo ''
echo 'Generating keys'
echo '---------------'
echo ' --- generating private key'
nrfutil keys generate $OUTPATH/private_key.pem >/dev/null

echo ' --- generating public key based on private key'
nrfutil keys display --key pk --format code $OUTPATH/private_key.pem --out_file $OUTPATH/dfu_public_key.c

echo ' --- encrypting private key'
try openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in $OUTPATH/private_key.pem -out $OUTPATH/dfu_key.pem.enc
rm $OUTPATH/private_key.pem

### Generate bootloaders
echo ''
echo 'Generating bootloaders'
echo '----------------------'
cp -f $OUTPATH/dfu_public_key.c $SDKPATH/components/dfu/

echo -n ' --- generating nrf52832 bootloader... '
cd $SDKPATH/components/dfu/secure_bootloader/pca10040_ble/armgcc/ && make clean >/dev/null && make >/dev/null
if [ $? -eq 0 ]; then
   echo OK
else
   echo FAIL
fi
cp ./_build/nrf52832_xxaa_s132.hex $OUTPATH
mv $OUTPATH/nrf52832_xxaa_s132.hex $OUTPATH/dfu_bootloader_nrf52832_xxaa_s132.hex

echo -n ' --- generating nrf52840 bootloader... '
cd $SDKPATH/components/dfu/secure_bootloader/pca10056_ble/armgcc/ && make clean >/dev/null && make >/dev/null
if [ $? -eq 0 ]; then
   echo OK
else
   echo FAIL
fi
cp ./_build/nrf52840_xxaa_s140.hex $OUTPATH
mv $OUTPATH/nrf52840_xxaa_s140.hex $OUTPATH/dfu_bootloader_nrf52840_xxaa_s140.hex

### Clean up
rm $SDKPATH/components/dfu/dfu_public_key.c

echo ''
echo 'Files generated in '$OUTPATH
echo ''
echo 'Done.'